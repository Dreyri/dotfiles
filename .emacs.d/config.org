#+TITLE: Emacs configuration file
#+AUTHOR: Frederik Engels
#+BABEL: :cache yes
#+LATEX_HEADER: \usepackage{parskip}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+PROPERTY: header-args :tangle yes

* About
My personal init.el file, I'm still new at this

* Setup
Automatically tangle after every save

#+BEGIN_SRC emacs-lisp
(defun config/tangle-init()
  "Tangle if the current file is config.org"
  (when (equal (buffer-file-name)
               (expand-file-name (concat user-emacs-directory "config.org")))
    (let ((prog-mode-hook nil))
      (org-babel-tangle)
      (byte-compile-file (concat user-emacs-directory "config.el")))))

(add-hook 'after-save-hook 'config/tangle-init)
#+END_SRC

Load files from /usr/share and any personal projects if they happen

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "/usr/share/emacs/site-lisp")
(add-to-list 'load-path (concat user-emacs-directory "lisp"))
#+END_SRC

* Packages

Use =package= to simplify managing extensions
=cl= adds a lot of handy functions from common lisp.

Use [[http://melpa.org/#/][melpa]] for packages

#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/") t)
(package-initialize)
(package-refresh-contents)
#+END_SRC

#+RESULTS:

Function to check if packages are installed

#+BEGIN_SRC emacs-lisp
(defun ensure-package-installed (&rest packages)
  (mapcar
    (lambda (package)
      (unless (package-installed-p package)
        (package-install package)))
    packages))
#+END_SRC

Packages we want to have

#+BEGIN_SRC emacs-lisp
(ensure-package-installed 
  'auto-compile
  'company
  'evil
  'evil-escape
  'evil-leader
  'evil-surround
  'idle-require
  'helm
  'helm-company
  'helm-dash
  'helm-projectile
  'jedi
  'linum-relative
  'linum-off
  'magit
  'markdown-mode
  'material-theme
  'org
  'org-ref
  'powerline
  'projectile
  'spacemacs-theme
  'slime
  'which-key)
#+END_SRC

* Style

Disable the menu bar, scroll bar and tool bar

#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(toggle-scroll-bar -1)
(tool-bar-mode -1)
#+END_SRC

Set Fira Mono as font.
I will replace this with Fira Code once emacs supports ligatures.

#+BEGIN_SRC emacs-lisp
(set-frame-font "Fira Mono 11")
#+END_SRC

Use the spacemacs theme because I like it
#+BEGIN_SRC emacs-lisp
(load-theme 'spacemacs-dark)
#+END_SRC

Answer y or n rather than yes or no

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Enable UTF8 by default

#+BEGIN_SRC emacs-lisp
(set-language-environment "UTF-8")
#+END_SRC

* Configuration

Configuration for individual packages

** General
Disable automatic backup and autosave

#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
(setq auto-save-default nil)
#+END_SRC
** Evil leader

Set leader key to <SPC>

#+BEGIN_SRC emacs-lisp
(require 'evil-leader)
(global-evil-leader-mode)
(evil-leader/set-leader "<SPC>")
#+END_SRC

**** Basics

Use <SPC> <SPC> as an alternative to M-x.

#+BEGIN_SRC emacs-lisp
(evil-leader/set-key "<SPC>" 'execute-extended-command)
#+END_SRC

**** Files

File navigation with evil

#+BEGIN_SRC emacs-lisp
(evil-leader/set-key "ff" 'find-file)
(evil-leader/set-key "fr" 'rename-file)
#+END_SRC

**** Window
     
All actions related to handling windows.
Settings for keybind "wa" at [[ace-window]]

Window creation.

#+BEGIN_SRC emacs-lisp
(evil-leader/set-key "w/" 'split-window-horizontally)
(evil-leader/set-key "w-" 'split-window-vertically)
#+END_SRC

Window movement

#+BEGIN_SRC emacs-lisp
(evil-leader/set-key "wl" 'windmove-right)
(evil-leader/set-key "wh" 'windmove-left)
(evil-leader/set-key "wj" 'windmove-down)
(evil-leader/set-key "wk" 'windmove-up)
#+END_SRC

**** Config

Reload the config as spacemacs with <SPC>feR

#+BEGIN_SRC emacs-lisp
(defun config/reload-config ()
  (interactive)
  (load-file (concat "~/.emacs.d/" "init.el")))
  ; for some reason user-emacs-directory gets undefined
  ;(load-file (concat (user-emacs-directory "init.el"))))
(evil-leader/set-key "feR" 'config/reload-config)
#+END_SRC

Open the config.org file

#+BEGIN_SRC emacs-lisp
(defun config/open-config ()
  (interactive)
  (find-file (concat "~/.emacs.d/" "config.org")))  
(evil-leader/set-key "fec" 'config/open-config)
#+END_SRC

** Ace Window

<<ace-window>>
Always dispatch to ace-window rather than using other-window for 2 windows

#+BEGIN_SRC emacs-lisp
(require 'ace-window)
(setq aw-dispatch-always t)
#+END_SRC

*** Evil

#+BEGIN_SRC emacs-lisp
(evil-leader/set-key "wa" 'ace-window)
#+END_SRC

** Linum

Enable lines numbers in the gutter.
Absolute line for current line and relative around that.

#+BEGIN_SRC emacs-lisp
(linum-mode)
(linum-relative-mode)
(setq linum-relative-current-symbol "")
#+END_SRC

Enable linum everywhere and turn it off for certain modes
and files over 3MB large

#+BEGIN_SRC emacs-lisp
(require 'linum-off)
#+END_SRC

** Company

#+BEGIN_SRC emacs-lisp

#+END_SRC

** Helm

#+BEGIN_SRC emacs-lisp
(require 'helm)
(require 'helm-config)
#+END_SRC
** Projectile
Set our search paths for projects

#+BEGIN_SRC emacs-lisp
(setq projectile-project-search-path '("~/Documents/Projects"))
#+END_SRC

** Powerline

#+BEGIN_SRC emacs-lisp
(require 'powerline)
(powerline-default-theme)
#+END_SRC

** Which key

Enable which key which shows the available key bindings similar to spacemacs

#+BEGIN_SRC emacs-lisp
(require 'which-key)
(which-key-mode)
(which-key-setup-side-window-bottom)
#+END_SRC

** Evil
   Evil needs to come last to overlay most of the other mode keys
*** Evil
  
Enable evil mode.
This needs to be after enabling global-evil-leader-mode.

#+BEGIN_SRC emacs-lisp
(require 'evil)
(evil-mode 1)
#+END_SRC

*** Surround
    
same as vim-surround in vim

#+BEGIN_SRC emacs-lisp
(global-evil-surround-mode)
#+END_SRC

*** Escape
    
I like using "fd" to escape insert mode

#+BEGIN_SRC emacs-lisp
(evil-escape-mode)
(setq-default evil-escape-key-sequence "fd")
(setq-default evil-escape-delay 0.15)
#+END_SRC
