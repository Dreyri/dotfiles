#+TITLE: Emacs configuration file
#+AUTHOR: Frederik Engels
#+BABEL: :cache yes
#+LATEX_HEADER: \usepackage{parskip}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+PROPERTY: header-args :tangle yes

* About
My personal init.el file, I'm still new at this

* Setup
Automatically tangle after every save

#+BEGIN_SRC emacs-lisp
(defun config/tangle-init()
  "Tangle if the current file is config.org"
  (when (equal (buffer-file-name)
               (expand-file-name (concat user-emacs-directory "config.org")))
    (let ((prog-mode-hook nil))
      (org-babel-tangle)
      (byte-compile-file (concat user-emacs-directory "config.el")))))

(add-hook 'after-save-hook 'config/tangle-init)
#+END_SRC

Load files from /usr/share and any personal projects if they happen

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "/usr/share/emacs/site-lisp")
(add-to-list 'load-path (concat user-emacs-directory "lisp"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun config/edit-config ()
  (interactive)
  (find-file (concat user-emacs-directory "config.org")))
(defun config/load-config ()
  (interactive)
  (load-file (concat user-emacs-directory "init.el")))
#+END_SRC

* Packages

Use =package= to simplify managing extensions
=cl= adds a lot of handy functions from common lisp.

Use [[http://melpa.org/#/][melpa]] for packages

#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/") t)
(package-initialize)
(package-refresh-contents)
#+END_SRC

Bootstrap =use-package=.
Documentation for =use-package= can be found [[https://jwiegley.github.io/use-package/][here]].

#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-enable-at-startup nil)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(add-to-list 'package-archives '("marmalade" . "https://marmalade-repo.org/packages/"))

(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))
#+END_SRC

#+RESULTS:

Function to check if packages are installed

#+BEGIN_SRC emacs-lisp
(defun ensure-package-installed (&rest packages)
  (mapcar
    (lambda (package)
      (unless (package-installed-p package)
        (package-install package)))
    packages))
#+END_SRC

Packages we want to have

#+BEGIN_SRC emacs-lisp
(ensure-package-installed 
  'auto-compile
  'idle-require
  'swiper
  'magit
  'org-ref
  'powerline
  'slime)
#+END_SRC

* Style

Disable the menu bar, scroll bar and tool bar.
We cannot establish dominance with any of these enabled.

#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(toggle-scroll-bar -1)
(tool-bar-mode -1)
#+END_SRC

Set Fira Mono as font.
I will replace this with Fira Code once emacs supports ligatures.

#+BEGIN_SRC emacs-lisp
(set-frame-font "Fira Mono 11")
#+END_SRC

Use the spacemacs theme because I like it and skip confirmation.

#+BEGIN_SRC emacs-lisp
(use-package spacemacs-theme
  :ensure t
  :defer t
  :init (load-theme 'spacemacs-dark t))
#+END_SRC

Answer y or n rather than yes or no

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Enable UTF8 by default

#+BEGIN_SRC emacs-lisp
(set-language-environment "UTF-8")
#+END_SRC

** C

Indentation settings for c

#+BEGIN_SRC emacs-lisp
(setq c-default-style "linux"
      c-basic-offset 4)
#+END_SRC

* Configuration

Configuration for individual packages

** General
Disable automatic backup and autosave

#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
(setq auto-save-default nil)
#+END_SRC
** Editorconfig

#+BEGIN_SRC emacs-lisp
(use-package editorconfig
  :ensure t
  :delight (editorconfig-mode)
  :config
  (editorconfig-mode 1))
#+END_SRC

** Ace Window

Always dispatch to ace-window rather than using other-window for 2 windows

#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :commands (ace-window)
  :init (setq aw-dispatch-always t))
#+END_SRC

** Linum

Enable lines numbers in the gutter.
Absolute line for current line and relative around that.

#+BEGIN_SRC emacs-lisp
(use-package linum-relative
  :ensure t
  :hook
  (prog-mode . linum-mode)
  (prog-mode . linum-relative-mode)
  (text-mode . linum-mode)
  (text-mode . linum-relative-mode)
  :init
  (setq linum-relative-current-symbol ""))
#+END_SRC

** Clang Format
   
Format in C/C++ using clang-format.
I should look into these custom format options.

#+BEGIN_SRC emacs-lisp
(defun config/clang-format-region-mozilla (s e)
  (interactive
    (if (use-region-p)
      (list (region-beginning) (region-end))
      (list (point) (point))))
  (clang-format-region s e "Mozilla"))
  
(defun config/clang-format-buffer-mozilla ()
  (interactive)
  (clang-format-buffer "Mozilla"))

(use-package clang-format
  :ensure t
  :bind 
    (:map c-mode-map ("<tab>" . clang-format-buffer)
     :map c++-mode-map ("<tab>" . clang-format-buffer)
     :map objc-mode-map ("<tab>" . clang-format-buffer)))
#+END_SRC

** Company
   
Website for [[http://company-mode.github.io/][company-mode]].

#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :defer 2
  :delight
  :custom
  (company-begin-commands '(self-insert-command))
  (company-idle-delay .1)
  (company-minimum-prefix-length 2)
  (company-show-numbers t)
  (company-tooltip-align-annotations t)
  (global-company-mode t))
#+END_SRC

Get beautiful icons.
I don't like this currently, will have to look into using fonts for icons.
as described [[https://github.com/sebastiencs/company-box/wiki/icons][here]].

#+BEGIN_SRC emacs-lisp :tangle no
(use-package company-box
  :ensure t
  :after company
  :diminish
  :hook (company-mode . company-box-mode))
#+END_SRC

** Irony

#+BEGIN_SRC emacs-lisp
(use-package irony
  :ensure t
  :hook
  (c-mode . irony-mode)
  (c++-mode . irony-mode)
  (objc-mode . irony-mode)
  (irony-mode . irony-cdb-autosetup-compile-options))
#+END_SRC

*** company

#+BEGIN_SRC emacs-lisp
(use-package company-irony
  :ensure t
  :after (irony company)
  :hook
  (irony-mode . (lambda () (add-to-list 'company-backends 'company-irony))))
#+END_SRC

**** headers
     
#+BEGIN_SRC emacs-lisp
(use-package company-irony-c-headers
  :ensure t
  :after (company)
  :config
  (add-to-list 'company-backends 'company-irony-c-headers))
#+END_SRC

** Flycheck
   
Enable flycheck for these modes
  
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :defer t
  :delight
  :hook 
  (c-mode . (lambda () (setq flycheck-clang-language-standard "c99")))
  (c++-mode . (lambda () (setq flycheck-clang-language-standard "c++17")))
  (c-mode . flycheck-mode)
  (c++-mode . flycheck-mode))
#+END_SRC

*** Flycheck-irony

#+BEGIN_SRC emacs-lisp
(use-package flycheck-irony
  :ensure t
  :after (flycheck)
  :hook 
  (c-mode . flycheck-irony-setup)
  (c++-mode . flycheck-irony-setup))
#+END_SRC

*** clang-analyzer

#+BEGIN_SRC emacs-lisp
(use-package flycheck-clang-analyzer
  :ensure t
  :config
  (flycheck-clang-analyzer-setup))
#+END_SRC

*** Pos tip

#+BEGIN_SRC emacs-lisp
(use-package flycheck-pos-tip
  :ensure t
  :hook (flycheck-mode . flycheck-pos-tip-mode))
#+END_SRC

** Ivy

TODO: Replace helm with ivy
Configuration for Ivy, Counsel and Swiper

#+BEGIN_SRC emacs-lisp
(use-package ivy
  :ensure t
  :delight (ivy-mode)
  :init
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (setq ivy-display-style 'fancy))
#+END_SRC

counsel setup 

#+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t
  :after (ivy))
  
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package counsel-projectile
  :ensure t
  :delight (counsel-projectile-mode)
  :after (counsel)
  :init (counsel-projectile-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package counsel-gtags
  :ensure t
  :delight (counsel-gtags-mode)
  :after (counsel)
  :hook
  (c-mode . counsel-gtags-mode)
  (c++-mode . counsel-gtags-mode))
#+END_SRC

** Projectile
Set our search paths for projects

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :commands (counsel-projectile-switch-project)
  :ensure t
  :config
  (projectile-mode t)
  (setq projectile-enable-caching t))
#+END_SRC

** Powerline

#+BEGIN_SRC emacs-lisp
(use-package powerline
  :ensure t
  :init (powerline-default-theme))
#+END_SRC

** TODO Yasnippet

Download and enable Yasnippet.

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :delight 
  (yas-global-mode)
  (yas-minor-mode)
  :init
  (yas-global-mode)
  :config
  (yas-reload-all))
#+END_SRC

** Which key

Enable which key which shows the available key bindings similar to spacemacs

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :delight (which-key-mode)
  :init
  (which-key-mode)
  (which-key-setup-side-window-bottom))
#+END_SRC

** Buf Move

#+BEGIN_SRC emacs-lisp
(use-package buffer-move
  :ensure t
  :commands (buf-move-left buf-move-right buf-move-up buf-move-down))
#+END_SRC
** General
  
I'll have to start migrating from evil-leader to general.
Why? because evil-leader doesn't want to stay activate after reload and it pisses me off.



#+BEGIN_SRC emacs-lisp
(use-package general
  :after (evil)
  :ensure t
  :config
  (general-evil-setup t)
  (general-create-definer my/space-definer
    :prefix "SPC")
  (general-mmap
    ";" 'evil-ex
    ":" 'evil-repeat-find-char
    "=" 'enlarge-window
    "-" 'shrink-window
    "C-=" 'enlarge-window-horizontally
    "C--" 'shrink-window-horizontally)
  (my/space-definer
    :states 'motion
    :keymaps 'override
    "SPC" '(counsel-M-x :wk "M-x")
    "f" '(:ignore t :wk "file")
    "ff" 'find-file
    "fR" 'rename-file
    "fe" '(:ignore t :wk "emacs")
    "fec" '(config/edit-config :wk "edit-config")
    "feR" '(config/load-config :wk "load-config")
    
    "w" '(:ignore t :wk "window")
    "wl" 'windmove-right
    "wh" 'windmove-left
    "wj" 'windmove-down
    "wk" 'windmove-up
    "wd" 'delete-window
    "w/" 'split-window-horizontally
    "w-" 'split-window-vertically
    "wa" 'ace-window

    "b" '(:ignore t :wk "buffer")
    "bb" 'counsel-ibuffer
    "bh" 'previous-buffer
    "bl" 'next-buffer
    "bd" 'kill-buffer
    "bL" 'buf-move-right
    "bH" 'buf-move-left
    "bJ" 'buf-move-down
    "bK" 'buf-move-up
    
    "p" '(:ignore t :wk "project")
    "pp" 'counsel-projectile-switch-project
    
    "g" '(:ignore t :wk "git")
    "gs" 'magit-status
    
    "h" '(:ignore t :wk "help")
    "hc" 'describe-char 
    "hf" 'describe-function
    "hk" 'describe-key
    "hm" 'describe-mode
    "hp" 'describe-package
    "ht" 'describe-theme
    "hv" 'describe-variable))
#+END_SRC

** Evil

Evil needs to come last to overlay most of the other mode keys
  
Enable evil mode.
This needs to be after enabling global-evil-leader-mode.

There's a good guide for Evil on [[https://github.com/noctuid/evil-guide][GitHub]].

#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :delight 
  (evil-escape-mode)
  (undo-tree-mode)
  (global-undo-tree-mode)
  :config 
    (evil-mode t)
    (evil-escape-mode t)
    (setq-default evil-escape-key-sequence "fd")
    (setq-default evil-escape-delay 0.15))
 
(use-package evil-magit
  :ensure t
  :after (evil))
    
(use-package evil-org
  :ensure t
  :delight (evil-org-mode)
  :after (evil)
  :hook (org-mode . evil-org-mode)
  :config
    (evil-org-set-key-theme '(textobjects insert navigation additional shift todo heading)))
    
(use-package evil-surround
  :ensure t
  :after (evil)
  :config (global-evil-surround-mode 1))
#+END_SRC


* Rust
  
Basic rust setup. I'm interested in giving this language a serious go with all the hype around it.

#+BEGIN_SRC emacs-lisp
(use-package rust-mode
  :ensure t
  :mode "\\.rs\\'")
#+END_SRC

** Racer

#+BEGIN_SRC emacs-lisp
(use-package racer
  :ensure t
  :hook
  (rust-mode . racer-mode)
  (rust-mode . eldoc-mode))
#+END_SRC

* Games
  
** Typing
   
#+BEGIN_SRC emacs-lisp
(use-package typit
  :ensure t
  :commands (typit-test typit-basic-test typit-advanced-test))
#+END_SRC

