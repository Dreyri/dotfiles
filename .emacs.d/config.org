#+TITLE: Emacs configuration file
#+AUTHOR: Frederik Engels
#+BABEL: :cache yes
#+LATEX_HEADER: \usepackage{parskip}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+PROPERTY: header-args :tangle yes

* About
My personal init.el file, I'm still new at this

* Setup
Automatically tangle after every save

#+BEGIN_SRC emacs-lisp
(defun config/tangle-init()
  "Tangle if the current file is config.org"
  (when (equal (buffer-file-name)
               (expand-file-name (concat user-emacs-directory "config.org")))
    (let ((prog-mode-hook nil))
      (org-babel-tangle)
      (byte-compile-file (concat user-emacs-directory "config.el")))))

(add-hook 'after-save-hook 'config/tangle-init)
#+END_SRC

Load files from /usr/share and any personal projects if they happen

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "/usr/share/emacs/site-lisp")
(add-to-list 'load-path (concat user-emacs-directory "lisp"))
#+END_SRC

* Packages

Use =package= to simplify managing extensions
=cl= adds a lot of handy functions from common lisp.

Use [[http://melpa.org/#/][melpa]] for packages

#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/") t)
(package-initialize)
(package-refresh-contents)
#+END_SRC

Bootstrap =use-package=

#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-enable-at-startup nil)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(add-to-list 'package-archives '("marmalade" . "https://marmalade-repo.org/packages/"))

(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))
#+END_SRC

#+RESULTS:

Function to check if packages are installed

#+BEGIN_SRC emacs-lisp
(defun ensure-package-installed (&rest packages)
  (mapcar
    (lambda (package)
      (unless (package-installed-p package)
        (package-install package)))
    packages))
#+END_SRC

Packages we want to have

#+BEGIN_SRC emacs-lisp
(ensure-package-installed 
  'auto-compile
  'idle-require
  'ivy
  'counsel
  'counsel-gtags
  'counsel-projectile
  'swiper
  'jedi
  'linum-relative
  'linum-off
  'magit
  'org-ref
  'powerline
  'spacemacs-theme
  'slime)
#+END_SRC

* Style

Disable the menu bar, scroll bar and tool bar.
We cannot establish dominance with any of these enabled.

#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(toggle-scroll-bar -1)
(tool-bar-mode -1)
#+END_SRC

Set Fira Mono as font.
I will replace this with Fira Code once emacs supports ligatures.

#+BEGIN_SRC emacs-lisp
(set-frame-font "Fira Mono 11")
#+END_SRC

Use the spacemacs theme because I like it and skip confirmation.

#+BEGIN_SRC emacs-lisp
(load-theme 'spacemacs-dark t)
#+END_SRC

Answer y or n rather than yes or no

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Enable UTF8 by default

#+BEGIN_SRC emacs-lisp
(set-language-environment "UTF-8")
#+END_SRC

** C

Indentation settings for c

#+BEGIN_SRC emacs-lisp
(setq c-default-style "linux"
      c-basic-offset 4)
#+END_SRC

* Configuration

Configuration for individual packages

** General
Disable automatic backup and autosave

#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
(setq auto-save-default nil)
#+END_SRC
** Ace Window

Always dispatch to ace-window rather than using other-window for 2 windows

#+BEGIN_SRC emacs-lisp
(defun config/ace-window-evil-keybinds ()
  (evil-leader/set-key "wa" 'ace-window))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :init (setq aw-dispatch-always t)
  :config
  (config/ace-window-evil-keybinds))
#+END_SRC

*** Evil
** Linum

Enable lines numbers in the gutter.
Absolute line for current line and relative around that.

#+BEGIN_SRC emacs-lisp
(use-package linum-relative
  :ensure t
  :hook
  (prog-mode . linum-mode)
  (prog-mode . linum-relative-mode)
  :config
  (setq linum-relative-current-symbol ""))
#+END_SRC

** Clang Format
   
Format in C/C++ using clang-format

#+BEGIN_SRC emacs-lisp
(use-package clang-format
  :after (cc-mode)
  :ensure t
  :bind 
    (:map c-mode-map ("<tab>" . clang-format-buffer)
     :map c++-mode-map ("<tab>" . clang-format-buffer)))
    
#+END_SRC

** Company
   
Website for [[http://company-mode.github.io/][company-mode]].

#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :defer 2
  :diminish
  :custom
  (company-begin-commands '(self-insert-command))
  (company-idle-delay .1)
  (company-minimum-prefix-length 2)
  (company-show-numbers t)
  (company-tooltip-align-annotations t)
  (global-company-mode t))
#+END_SRC

Get beautiful icons.
I don't like this currently, will have to look into using fonts for icons.
as described [[https://github.com/sebastiencs/company-box/wiki/icons][here]].

#+BEGIN_SRC emacs-lisp :tangle no
(use-package company-box
  :ensure t
  :after company
  :diminish
  :hook (company-mode . company-box-mode))
#+END_SRC

** Flycheck
   
Enable flycheck for these modes
  
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :hook ((c-mode . (lambda () (setq flycheck-clang-language-standard "c99")
         (c++-mode . (lambda () (setq flycheck-clang-language-standard "c++17")))))))
#+END_SRC

** Ivy

TODO: Replace helm with ivy
Configuration for Ivy, Counsel and Swiper

#+BEGIN_SRC emacs-lisp
(use-package ivy
  :ensure t
  :init
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t))
#+END_SRC

counsel setup 

#+BEGIN_SRC emacs-lisp

#+END_SRC

#+BEGIN_SRC emacs-lisp
(counsel-projectile-mode)
(global-set-key (kbd "M-x") 'counsel-M-x)
(evil-leader/set-key "<SPC>" 'counsel-M-x)
(evil-leader/set-key "ff" 'find-file)

(add-hook 'c-mode-hook 'counsel-gtags-mode)
(add-hook 'c++-mode-hook 'counsel-gtags-mode)
#+END_SRC

** Projectile
Set our search paths for projects

#+BEGIN_SRC emacs-lisp

(defun config/projectile-evil-keybinds()
  (evil-leader/set-key "pp" 'counsel-projectile-switch-project))

(use-package projectile
  :ensure t
  :config
  (projectile-mode t)
  (setq projectile-enable-caching t)
  (config/projectile-evil-keybinds))
#+END_SRC

** Powerline

#+BEGIN_SRC emacs-lisp
(use-package powerline
  :ensure t
  :init (powerline-default-theme))
#+END_SRC

** Yasnippet

Download and enable Yasnippet.

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :init
  (yas-global-mode)
  :config
  (yas-reload-all))
#+END_SRC

** Which key

Enable which key which shows the available key bindings similar to spacemacs

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :init
    (which-key-mode)
    (which-key-setup-side-window-bottom))
#+END_SRC

** Evil
   
#+BEGIN_SRC emacs-lisp
(defun config/evil-window-keybinds()
  (evil-leader/set-key 
    "wl" 'windmove-right
    "wh" 'windmove-left
    "wj" 'windmove-down
    "wk" 'windmove-up
    "wd" 'delete-window
    "w/" 'split-window-horizontally
    "w-" 'split-window-vertically))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun config/evil-buffer-keybinds()
  (evil-leader/set-key 
    "bh" 'previous-buffer
    "bl" 'next-buffer
    "bd" 'kill-buffer))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun config/evil-help-keybinds()
  (evil-leader/set-key 
    "hc" 'describe-char 
    "hf" 'describe-function
    "hk" 'describe-key
    "hm" 'describe-mode
    "hp" 'describe-package
    "ht" 'describe-theme
    "hv" 'describe-variable))
#+END_SRC

Evil needs to come last to overlay most of the other mode keys
  
Enable evil mode.
This needs to be after enabling global-evil-leader-mode.

There's a good guide for Evil on [[https://github.com/noctuid/evil-guide][GitHub]].

#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :config 
    (evil-mode t)
    (evil-escape-mode t)
    (setq-default evil-escape-key-sequence "fd")
    (setq-default evil-escape-delay 0.15))
  
(use-package evil-leader
  :ensure t
  :after (evil)
  :init (evil-leader-mode)
  :config 
  (evil-leader/set-leader "<SPC>")
  (config/evil-window-keybinds)
  (config/evil-buffer-keybinds)
  (config/evil-help-keybinds))
  
(use-package evil-magit
  :ensure t
  :after (evil)
  :config
    (evil-leader/set-key "gs" 'magit-status))
    
(use-package evil-org
  :ensure t
  :after (evil)
  :hook (org-mode . evil-org-mode)
  :config
    (evil-org-set-key-theme '(textobjects insert navigation additional shift todo heading)))
    
(use-package evil-surround
  :ensure t
  :after (evil)
  :config (global-evil-surround-mode 1))
#+END_SRC

Reloading and editing of the config file

#+BEGIN_SRC emacs-lisp
(defun config/edit-config ()
  (interactive)
  (find-file (concat user-emacs-directory "config.org")))
(defun config/load-config ()
  (interactive)
  (load-file (concat user-emacs-directory "init.el")))
  
(evil-leader/set-key "fec" 'config/edit-config)
(evil-leader/set-key "feR" 'config/load-config)
#+END_SRC
